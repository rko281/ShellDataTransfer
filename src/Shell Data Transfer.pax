| package |
package := Package name: 'Shell Data Transfer'.
package paxVersion: 1;
	basicComment: 'Shell Data Transfer

Based on DH Shell Data Transfer by Louis Sumbery and Steve Waring.
Extended and updated for Dolphin Smalltalk 7.2 by John Aspinall 2024.

See ShellDragDropSample example application for usage.

Original Comment:
-----
Copyright (c) Louis Sumberg and Steve Waring 2002.
	<lsumberg@mindspring.com>, <http://www.mindspring.com/~lsumberg/dolphin>
	<swaring@ozemail.com.au>, <http://www.dolphinharbor.org>
Public Domain Freeware.

This package adds the capability for data to be transferred via the OLE clipboard and through OLE drag and drop.  This also allows for data transfer between Dolphin and non-Dolphin applications.

The key classes in this package are ShellDragDropSession and IDataObject.  In general, a View registers itself as a potential drop target with ShellDragDropSession, which creates an instance of itself and handles drag and drop events.  This instance also interacts with IDataObject to extract the data that is being transferred.  Other classes in the package, such as FORMATETC and STGMEDIUM, represent Windows structures and are used in Windows API calls.
-----'.

package basicPackageVersion: '5.1.2'.

package classNames
	add: #DROPFILES;
	add: #IDropSource;
	add: #IDropTarget;
	add: #ShellDragDropSample;
	add: #ShellDragDropSession;
	yourself.

package methodNames
	add: #Clipboard -> #formatIdFor:;
	add: #Clipboard -> #setBytes:formatId:;
	add: #IDataObject -> #addressForFormatEtc:do:;
	add: #IDataObject -> #availableFormatEtcs;
	add: #IDataObject -> #formatEtc:ifNone:;
	add: #IDataObject -> #formatEtcWithId:ifNone:;
	add: #IDataObject -> #getDropFilesIfNone:;
	add: #ListControlView -> #dragDropSessionClass;
	add: #ListControlView -> #dragDropSessionClass:;
	add: #OLELibrary -> #doDragDrop:dropSource:dwOKEffects:pdwEffect:;
	add: #OLELibrary -> #oleGetClipboard:;
	add: #OLELibrary -> #registerDragDrop:pDropTarget:;
	add: #OLELibrary -> #revokeDragDrop:;
	add: #ShellLibrary -> #dragQueryFile:;
	add: #ShellLibrary -> #SHCreateDataObject:cidl:apidl:pdtInner:riid:p:;
	add: 'IDataObject class' -> #clsid;
	add: 'IDataObject class' -> #exampleClipboard;
	add: 'IDataObject class' -> #oleClipboard;
	yourself.

package globalNames
	add: #OLEShellDataTransferConstants;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\Core\Object Arts\Dolphin\Base\Dolphin'
	'..\Core\Object Arts\Dolphin\MVP\Base\Dolphin Basic Geometry'
	'..\Core\Object Arts\Dolphin\MVP\Views\Common Controls\Dolphin Common Controls'
	'..\Core\Object Arts\Dolphin\MVP\Views\Control Bars\Dolphin Control Bars'
	'..\Core\Object Arts\Dolphin\MVP\Models\List\Dolphin List Models'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\List\Dolphin List Presenter'
	'..\Core\Object Arts\Dolphin\Base\Dolphin Message Box'
	'..\Core\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\Text\Dolphin Text Presenter'
	'..\Core\Object Arts\Dolphin\MVP\Type Converters\Dolphin Type Converters'
	'..\Core\Object Arts\Dolphin\ActiveX\COM\OLE COM'
	'..\Core\Object Arts\Dolphin\ActiveX\Persist\OLE Persistence and Data Transfer'
	'..\Core\Object Arts\Dolphin\ActiveX\Shell\Windows Shell').

package!

"Class Definitions"!

InternalDragDropSession subclass: #ShellDragDropSession
	instanceVariableNames: 'keyState dataObject registeredView dragOperation'
	classVariableNames: 'Register'
	poolDictionaries: 'OLEConstants OLEShellDataTransferConstants Win32Errors'
	classInstanceVariableNames: ''!

IUnknown subclass: #IDropSource
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

IUnknown subclass: #IDropTarget
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

OLEStructure subclass: #DROPFILES
	instanceVariableNames: ''
	classVariableNames: '_OffsetOf_fNC _OffsetOf_fWide _OffsetOf_pFiles _OffsetOf_pt'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Shell subclass: #ShellDragDropSample
	instanceVariableNames: 'fullTextPresenter filesListPresenter directory'
	classVariableNames: ''
	poolDictionaries: 'OLEShellDataTransferConstants'
	classInstanceVariableNames: ''!

"Loose Methods"!

!Clipboard methodsFor!

formatIdFor: aSymbol

	^(registeredFormats at: aSymbol ifAbsent: [nil])
		ifNil: [self registerFormat: aSymbol]
		ifNotNil: [ :pair | pair first]!

setBytes: aByteArray formatId: format 
	"Private - Transfers aByteArray to the clipboard as data the <integer> format"

	self setData: (ExternalMemory copyBytesToGlobalHeap: aByteArray) formatId: format! !

!Clipboard categoriesForMethods!
formatIdFor:!accessing!public! !
setBytes:formatId:!accessing!public! !
!

!IDataObject methodsFor!

addressForFormatEtc: aSymbol do: aBlock

	"Get the address associated with the given formatEtc name, evaluating aBlock with the address"

	^(self formatEtc: aSymbol ifNone: [nil]) ifNotNil: 
		[ :formatEtc || medium handle |
		medium := self getData: formatEtc.
		handle := medium globalMemory.
		[aBlock value: (KernelLibrary default globalLock: handle)] ensure: [KernelLibrary default globalUnlock: handle]]!

availableFormatEtcs
	^(self enumFormatEtc: 1) contents!

formatEtc: formatName ifNone: operation
	
	^self formatEtcWithId: (Clipboard current formatIdFor: formatName) ifNone: operation!

formatEtcWithId: anInteger ifNone: operation
	
	^self availableFormatEtcs detect: [:each | each cfFormat = anInteger] ifNone: operation!

getDropFilesIfNone: operation
	| formatEtc medium |
	formatEtc := self formatEtcWithId: CF_HDROP ifNone: [^operation value].
	self assert: [formatEtc tymed anyMask: OLEPersistConstants.TYMED_HGLOBAL].
	"medium is an object that we should be freeing using finalization"
	medium := self getData: formatEtc.
	self assert: [medium tymed anyMask: OLEPersistConstants.TYMED_HGLOBAL].
	^ShellLibrary default dragQueryFile: medium handle! !

!IDataObject categoriesForMethods!
addressForFormatEtc:do:!accessing!public! !
availableFormatEtcs!accessing!public! !
formatEtc:ifNone:!accessing!public! !
formatEtcWithId:ifNone:!accessing!public! !
getDropFilesIfNone:!accessing!public! !
!

!IDataObject class methodsFor!

clsid
	"Answer the <CLSID> of the standard system implementation of this interface."

	^CLSID fromString: '{0000010e-0000-0000-C000-000000000046}'!

exampleClipboard
	"Use Case 1:  Extracting the File Names from the Data Object"

	"Retrieve the IDataObject interface"

	| dataObject |
	dataObject := IDataObject oleClipboard.
	"Enumerate and answer allAvailableFormatEtcs"
	dataObject availableFormatEtcs.
	"Use the CF_HDROP format to retrieve fileNames"

	"Copy some text from here ... should answer 'none'"
	IDataObject oleClipboard getDropFilesIfNone: ['none'].
	"In Windows Explorer, select a file, right-click, and select copy"
	IDataObject oleClipboard getDropFilesIfNone: ['none'].
	"In Windows Explorer, select multiple files, right-click, and select copy"
	IDataObject oleClipboard getDropFilesIfNone: ['none']!

oleClipboard
	"Answer an instance of the receiver representing what's on the clipboard."

	| instance |
	instance := self newPointer.
	OLELibrary default oleGetClipboard: instance.
	^instance! !

!IDataObject class categoriesForMethods!
clsid!examples!public! !
exampleClipboard!examples!public! !
oleClipboard!instance creation!public! !
!

!ListControlView methodsFor!

dragDropSessionClass

	^self propertyAt: #dragDropSessionClass ifAbsent: [super dragDropSessionClass]!

dragDropSessionClass: aDragDropSessionClass

	self propertyAt: #dragDropSessionClass put: aDragDropSessionClass! !

!ListControlView categoriesForMethods!
dragDropSessionClass!accessing!public! !
dragDropSessionClass:!accessing!public! !
!

!OLELibrary methodsFor!

doDragDrop: iDataObject dropSource: iDropSource dwOKEffects: dwOKEffects pdwEffect: pdwEffect
	"Carries out an OLE drag and drop operation.

	HRESULT DoDragDrop(
		[in]  LPDATAOBJECT pDataObj,
		[in]  LPDROPSOURCE pDropSource,
		[in]  DWORD        dwOKEffects,
		[out] LPDWORD      pdwEffect
	);"

	<stdcall: hresult DoDragDrop IDataObject* IDropSource* dword dword*>
	^self invalidCall: _failureCode!

oleGetClipboard: ppDataObj
	"Retrieves a data object that you can use to access the contents of the clipboard.


		WINOLEAPI OleGetClipboard(
			  IDataObject ** ppDataObj  //Address of output variable that  receives the IDataObject interface 
	);"

	<stdcall: hresult OleGetClipboard lppvoid>
	^self invalidCall: _failureCode!

registerDragDrop: hwnd pDropTarget: anIDropTarget
	"Retrieves a data object that you can use to access the contents of the clipboard.

	WINOLEAPI RegisterDragDrop(
		HWND hwnd, //Handle to a window that can accept drops
		IDropTarget * pDropTarget	//Pointer to object that is to be target of drop
	); "

	<stdcall: hresult RegisterDragDrop handle IDropTarget*>
	^self invalidCall: _failureCode!

revokeDragDrop: hwnd
	"Revokes the registration of the specified application window as a potential target for OLE drag-and-drop operations.

	WINOLEAPI RevokeDragDrop(
		HWND hwnd //Handle to a window that can accept drops
	); "

	<stdcall: hresult RevokeDragDrop handle>
	^self invalidCall: _failureCode! !

!OLELibrary categoriesForMethods!
doDragDrop:dropSource:dwOKEffects:pdwEffect:!OLE Functions-Structured Storage!primitives!public! !
oleGetClipboard:!OLE Functions-Structured Storage!primitives!public! !
registerDragDrop:pDropTarget:!OLE Functions-Structured Storage!primitives!public! !
revokeDragDrop:!OLE Functions-Structured Storage!primitives!public! !
!

!ShellLibrary methodsFor!

dragQueryFile: hDrop
	"Answer a collection of <String>s"

	| num answer buffer |
	#shellAdded.
	answer := OrderedCollection new.
	(num := self 
				dragQueryFile: hDrop
				iFile: 4294967295
				lpszFile: nil
				cch: 0) = 4294967295 
		ifTrue: [^answer].
	0 to: num - 1
		do: 
			[:i | 
			buffer := File pathBuffer.
			self 
				dragQueryFile: hDrop
				iFile: i
				lpszFile: buffer
				cch: buffer size.
			answer add: buffer trimNulls].
	^answer!

SHCreateDataObject: pidlFolder cidl: cidl apidl: apidl pdtInner: pdtInnger riid: riid p: p

	"SHCreateDataObject(
  [in, optional] PCIDLIST_ABSOLUTE     pidlFolder,
  [in]           UINT                  cidl,
  [in, optional] PCUITEMID_CHILD_ARRAY apidl,
  [in, optional] IDataObject           *pdtInner,
  [in]           REFIID                riid,
  [out]          void                  **p"

	<stdcall: hresult SHCreateDataObject dword dword dword dword* guid* dword**>
	^self invalidCall: _failureCode! !

!ShellLibrary categoriesForMethods!
dragQueryFile:!public!win32 functions-shell library! !
SHCreateDataObject:cidl:apidl:pdtInner:riid:p:!public! !
!

"End of package definition"!

